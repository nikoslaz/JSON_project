// Case 1: String
// JsonValue stringTest = STRING("example");
// std::cout << "String Test: " << std::get<std::string>(stringTest.data) << std::endl;
// Case 2: Number
// JsonValue intTest = NUMBER(23);
// JsonValue floatTest = NUMBER(3.14);
// std::cout << "Integer Test: " << std::get<double>(intTest.data) << std::endl;
// std::cout << "Float Test: " << std::get<double>(floatTest.data) << std::endl;
// Case 3: Boolean
// JsonValue trueTest = TRUE;
// JsonValue falseTest = FALSE;
// std::cout << "True Test: " << std::get<bool>(trueTest.data) << std::endl;
// std::cout << "False Test: " << std::get<bool>(falseTest.data) << std::endl;
// Case 4: NULL
// JsonValue nullTest = NULL;
// std::cout << "Null Test: ";
// if (nullTest.isNULL()) {
//     std::cout << "null" << std::endl;
// } else {
//     std::cout << "not null" << std::endl;
// }
// JsonValue objectTest = JsonValue{
//     {(kv.create("hello")) ? JsonValue{} : kv.ret(JsonValue{2})},
//     {(kv.create("hello")) ? JsonValue{} : kv.ret(JsonValue{2})}
// };
// Case 5: Object
JSON(objectTest) = OBJECT{
    KEY(title) : STRING("C++11")
};

std::cout << "Object Test:" << std::endl;
for (const auto& [key, value] : std::get<JsonObject>(objectTest.data)) {
    std::cout << key << ": ";
    if (std::holds_alternative<std::string>(value.data)) {
        std::cout << std::get<std::string>(value.data);
    } else if (std::holds_alternative<double>(value.data)) {
        std::cout << std::get<double>(value.data);
    } else if (std::holds_alternative<bool>(value.data)) {
        std::cout << std::get<bool>(value.data);
    } else if (value.data.index() == 0) {
        std::cout << "null";
    }
    std::cout << std::endl;
}

 // JSON(book) = OBJECT {
    // KEY(title) : STRING("Gone Girl"),
    // KEY(published) : NUMBER(2012), 
    // KEY(type) : STRING("Thriller"), 
    // KEY(author) : OBJECT{
    //         KEY(firstname) : STRING("GILLIAN"), 
    //         KEY(sirname) : STRING("FLYNN"), 
    //         KEY(age) : NUMBER(45)
    //     }
    // };

    //  // Print the JSON object
    // std::cout << "JSON(book):" << std::endl;
    // for (const auto& [key, value] : std::get<JsonObject>(book.data)) {
    //     std::cout << key << ": ";
    //     if (std::holds_alternative<std::string>(value.data)) {
    //         std::cout << std::get<std::string>(value.data);
    //     } else if (std::holds_alternative<double>(value.data)) {
    //         std::cout << std::get<double>(value.data);
    //     } else if (std::holds_alternative<bool>(value.data)) {
    //         std::cout << std::get<bool>(value.data);
    //     } else if (std::holds_alternative<JsonObject>(value.data)) {
    //         std::cout << "{" << std::endl;
    //         for (const auto& [subKey, subValue] : std::get<JsonObject>(value.data)) {
    //             std::cout << "  " << subKey << ": ";
    //             if (std::holds_alternative<std::string>(subValue.data)) {
    //                 std::cout << std::get<std::string>(subValue.data);
    //             } else if (std::holds_alternative<double>(subValue.data)) {
    //                 std::cout << std::get<double>(subValue.data);
    //             } else if (std::holds_alternative<bool>(subValue.data)) {
    //                 std::cout << std::get<bool>(subValue.data);
    //             } else if (subValue.data.index() == 0) {
    //                 std::cout << "null";
    //             }
    //             std::cout << std::endl;
    //         }
    //         std::cout << "}";
    //     } else if (value.data.index() == 0) {
    //         std::cout << "null";
    //     }
    //     std::cout << std::endl;
    // }